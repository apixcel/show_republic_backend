version: '3.9'

services:
  postgresdb:
    image: postgres:13
    container_name: postgresdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qubitars
      POSTGRES_DB: demo
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - '27017:27017'
    networks:
      - app-network
    restart: unless-stopped

  nats:
    image: nats
    container_name: nats-server
    ports:
      - '4222:4222'
      - '8222:8222'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8222/healthz']
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 3s

  authentication:
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
    container_name: authentication
    volumes:
      - ./apps/authentication:/var/www/apps/authentication
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '4000:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  http-gateway:
    build:
      context: .
      dockerfile: ./apps/http-gateway/Dockerfile
    container_name: http-gateway
    volumes:
      - ./apps/http-gateway:/var/www/apps/http-gateway
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '3000:3000'
    depends_on:
      - authentication
      - nats
    networks:
      - app-network
    restart: always

  posts:
    build:
      context: .
      dockerfile: ./apps/posts/Dockerfile
    container_name: posts
    volumes:
      - ./apps/posts:/var/www/apps/posts
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '7001:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  creator:
    build:
      context: .
      dockerfile: ./apps/creator/Dockerfile
    container_name: creator
    volumes:
      - ./apps/creator:/var/www/apps/creator
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '6900:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  gamefication:
    build:
      context: .
      dockerfile: ./apps/gamefication/Dockerfile
    container_name: gamefication
    volumes:
      - ./apps/gamefication:/var/www/apps/gamefication
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '8350:3000'
    depends_on:
      - nats
    networks:
      - app-network
    restart: always

  admin:
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile
    container_name: admin
    volumes:
      - ./apps/admin:/var/www/apps/admin
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2025:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  live:
    build:
      context: .
      dockerfile: ./apps/live/Dockerfile
    container_name: live
    volumes:
      - ./apps/live:/var/www/apps/live
      - ./libs:/var/www/libs/
    env_file:
      - .env
    ports:
      - '2142:3000'
    environment:
      NODE_ENV: development
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  # brand:
  #   build:
  #     context: .
  #     dockerfile: ./apps/brand/Dockerfile
  #   container_name: brand
  #   volumes:
  #     - ./apps/brand:/var/www/apps/brand
  #     - ./libs:/var/www/libs/
  #   env_file:
  #     - .env
  #   ports:
  #     - '2144:3000'
  #   environment:
  #     NODE_ENV: development
  #   depends_on:
  #     - nats
  #     - postgresdb
  #   networks:
  #     - app-network
  #   restart: always

  # promotion:
  #   build:
  #     context: .
  #     dockerfile: ./apps/promotion/Dockerfile
  #   container_name: promotion
  #   volumes:
  #     - ./apps/promotion:/var/www/apps/promotion
  #     - ./libs:/var/www/libs/
  #   env_file:
  #     - .env
  #   ports:
  #     - '2145:3000'
  #   environment:
  #     NODE_ENV: development
  #   depends_on:
  #     - nats
  #     - postgresdb
  #   networks:
  #     - app-network
  #   restart: always

  profile:
    build:
      context: .
      dockerfile: ./apps/profile/Dockerfile
    container_name: profile
    volumes:
      - ./apps/profile:/var/www/apps/profile
      - ./libs:/var/www/libs/
    env_file:
      - .env
    ports:
      - '2138:3000'
    environment:
      NODE_ENV: development
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
    container_name: notification
    volumes:
      - ./apps/notification:/var/www/apps/notification
      - ./libs:/var/www/libs/
    env_file:
      - .env
    ports:
      - '4400:3000'
    environment:
      NODE_ENV: development
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  statistics:
    build:
      context: .
      dockerfile: ./apps/statistics/Dockerfile
    container_name: statistics
    volumes:
      - ./apps/statistics:/var/www/apps/statistics
      - ./libs:/var/www/libs/
    env_file:
      - .env
    ports:
      - '4545:3000'
    environment:
      NODE_ENV: development
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
