version: '3.9'

services:
  postgresdb:
    image: postgres:13
    container_name: postgresdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qubitars
      POSTGRES_DB: demo
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    networks:
      - app-network
    restart: unless-stopped

  nats:
    image: nats
    container_name: nats-server
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://nats-server:8222/"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  authentication:
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
    container_name: authentication
    volumes:
      - ./apps/authentication:/var/www/apps/authentication
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '4000:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  http-gateway:
    build:
      context: .
      dockerfile: ./apps/http-gateway/Dockerfile
    container_name: http-gateway
    volumes:
      - ./apps/http-gateway:/var/www/apps/http-gateway
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '3000:3000'
    depends_on:
      - authentication
      - nats
    networks:
      - app-network
    restart: always

  posts:
    build:
      context: .
      dockerfile: ./apps/posts/Dockerfile
    container_name: posts
    volumes:
      - ./apps/posts:/var/www/apps/posts
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '7001:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  category:
    build:
      context: .
      dockerfile: ./apps/category/Dockerfile
    container_name: category
    volumes:
      - ./apps/category:/var/www/apps/category
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2000:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  creator:
    build:
      context: .
      dockerfile: ./apps/creator/Dockerfile
    container_name: creator
    volumes:
      - ./apps/creator:/var/www/apps/creator
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '6900:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  gamefication:
    build:
      context: .
      dockerfile: ./apps/gamefication/Dockerfile
    container_name: gamefication
    volumes:
      - ./apps/gamefication:/var/www/apps/gamefication
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '8350:3000'
    depends_on:
      - nats
    networks:
      - app-network
    restart: always

  admin:
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile
    container_name: admin
    volumes:
      - ./apps/admin:/var/www/apps/admin
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2025:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  product:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
    container_name: product
    volumes:
      - ./apps/product:/var/www/apps/product
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2258:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  role-permission:
    build:
      context: .
      dockerfile: ./apps/role-permission/Dockerfile
    container_name: role-permission
    volumes:
      - ./apps/role-permission:/var/www/apps/role-permission
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2135:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  post-comment:
    build:
      context: .
      dockerfile: ./apps/post-comment/Dockerfile
    container_name: post-comment
    volumes:
      - ./apps/post-comment:/var/www/apps/post-comment
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '4200:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

  post-like-toggle:
    build:
      context: .
      dockerfile: ./apps/post-like-toggle/Dockerfile
    container_name: post-like-toggle
    volumes:
      - ./apps/post-like-toggle:/var/www/apps/post-like-toggle
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '4300:3000'
    depends_on:
      - nats
      - mongo
    networks:
      - app-network
    restart: always

  uploadfile:
    build:
      context: .
      dockerfile: ./apps/uploadfile/Dockerfile
    container_name: uploadfile
    volumes:
      - ./apps/uploadfile:/var/www/apps/uploadfile
      - ./libs:/var/www/libs
    env_file:
      - .env
    ports:
      - '2269:3000'
    depends_on:
      - nats
      - postgresdb
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: