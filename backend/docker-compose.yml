services:
  # HTTP Gateway Service
  http-gateway:
    build:
      context: .
      dockerfile: ./apps/http-gateway/Dockerfile
    container_name: http-gateway-service
    volumes:
      - ./apps/http-gateway:/var/www/apps/http-gateway:cached
      - ./libs:/var/www/libs/:cached

    env_file:
      - .env
    ports:
      - '3000:3000'
    networks:
      - app-network
    restart: always
    environment:
      NODE_OPTIONS: '--max-old-space-size=4096'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://http-gateway-service:3000/health']
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27017:27017

  authentication:
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
    container_name: authentication
    volumes:
      - ./apps/authentication:/var/www/apps/authentication:cached
      - ./libs:/var/www/libs/:cached
    env_file:
      - .env
    ports:
      - '4000:3000'
    environment:
      NODE_OPTIONS: '--max-old-space-size=4096'
    depends_on:
      - nats
      # - postgresdb
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://authentication:3000/health']
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  nats:
    image: nats
    container_name: nats-server
    ports:
      - '4222:4222'
      - '8222:8222'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://nats-server:8222/']
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  app-network:
    driver: bridge
